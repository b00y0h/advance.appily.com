@use "sass:color";
@use "@/styles/global/tokens";

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.qGroup {
  padding-block: 0.25em;

  &.isInvalid {
    label {
      color: var(--c-error);
    }
    input,
    select {
      border-color: var(--c-error);
    }

    span {
      color: var(--c-error);
    }
  }

  .fieldContainer {
    position: relative;

    & > label {
      width: 100%;
      display: flex;
      flex-direction: column-reverse;

      @media (min-width: tokens.$mq-800) {
        flex-direction: row;
      }
    }
  }

  .fieldLabel {
    display: flex;
    line-height: 1;
    color: var(--c-teal-700);
    font-size: tokens.$size-4;
    color: var(--c-black);
    pointer-events: none;
    transition: all 0.12s ease-out;

    @media (min-width: tokens.$mq-800) {
      margin-bottom: -0.05em;
      margin-left: 0.5em;
      z-index: 100;
      padding-inline: 0.2em;
      position: absolute;
      top: 50%;
      left: 0.5em;
      transform: translateY(-50%);
      transform-origin: left center;
      width: fit-content;
    }
  }

  .fieldError {
    display: block;
    font-size: tokens.$size-2;
    background: color.adjust(tokens.$c-error, $lightness: 50%);
    color: color.adjust(tokens.$c-error, $lightness: -5%);
    position: relative;
    left: 0.6em;
    padding-inline: 0.3em;
    width: fit-content;
  }

  input:not([type="checkbox"]),
  select {
    font-size: tokens.$size-5;
    padding: 0.9em 0.5em 0.5em;
    width: 100%;
    border: 1px solid var(--c-border-inputs);
    background-color: var(--c-slateGray-100);
    font-family: tokens.$f-sans;
    min-width: 12rem;
    border-radius: 0.3em;

    &:hover {
      border-color: var(--c-teal-500);
      background: var(--c-teal-50);
    }
  }

  input:focus {
    border-color: var(--c-teal-500);
    outline: none;

    & + span {
      color: var(--c-teal-700);

      @media (min-width: tokens.$mq-800) {
        transform: translateX(-0.5em) translateY(-1.5rem) scale(0.8);
      }
    }
  }

  select {
    min-height: 2.6em;
    width: auto;
    max-width: 100%;
    min-width: 12em;
  }

  &.text,
  &.email,
  &.tel,
  &.checkboxgrp,
  &.select,
  &.zip_code {
    border: none;
  }

  &.freetext {
    flex: 1 0 100%;
    font-size: tokens.$size-3;
    a {
      text-decoration: none;
      font-weight: 400;
    }
  }

  small {
    font-size: tokens.$size-2;
    color: var(--c-slateGray-900);
    margin-bottom: 0;
    padding-block: 0.5em 0;
  }

  &.select {
    .fieldContainer {
      @media (min-width: tokens.$mq-800) {
        width: fit-content;
        position: relative;
      }
    }
  }
}

.hidden {
  display: none;
}

// .checkboxGroupLabel {
// }

.checkboxGroupContainer {
  padding-block: 0.5em;

  .checkboxGroup {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
    gap: 0.8em;

    .checkBox {
      display: flex;
      align-items: center;
      gap: 0.3em;

      input {
        width: 1.8em;
        height: 1.8em;

        &:checked {
          background-color: var(--c-teal-500);
          border-color: var(--c-teal-500);
        }
      }
      label {
        font-size: tokens.$size-3;
        font-weight: tokens.$fontWeight-light;
      }
    }
  }
}

.select.empty {
  @media (min-width: tokens.$mq-800) {
    select {
      text-indent: -999em;
    }
    // .fieldLabel {
    //   // transform: translateX(-0.5em) translateY(-1.5rem) scale(0.8);
    // }
  }
}

.notEmpty {
  @media (min-width: tokens.$mq-800) {
    .fieldLabel {
      transform: translateX(-0.5em) translateY(-1.5rem) scale(0.8);
    }
  }
}

.textOptin {
  display: flex;
  flex-direction: row-reverse;

  // .checkboxGroupLabel {
  //   // order: 1;
  // }

  .checkboxGroupContainer {
    width: 1.8em;
    padding: 0;
  }

  .checkboxGroup {
    input + label {
      display: none;
    }
  }
}
